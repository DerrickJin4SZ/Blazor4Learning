@inject IJSRuntime JSRuntime

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> 扫描二维码
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Class="d-flex justify-content-center" Style="@_scanAreaStyle">
            <video id="videoElement" style="width:380px;"></video>
        </MudPaper>
        @if (_hasScanned)
        {


            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-warning mt-4 pt-4">
                    <strong>提示:</strong> @errorMessage
                </div>
            }
            else
            {
                if (qrCodeData != null)
                {
                    <MudText>@qrCodeData</MudText>
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DialogCancel" Class="px-10">取消</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private string qrCodeData = "";
    private string errorMessage = "";
    private bool _hasScanned = false;
    private string _scanAreaStyle = "height: 400px;";
    private IJSObjectReference _module;


    void DialogCancel()
    {
        StopCamera();
        MudDialog.Cancel();

    }
    async Task DialogConfirm()
    {
        StopCamera();
        if (qrCodeData =="")
        {
            errorMessage = "未找到二维码对应的设备/工具!";
            return;
        }
        MudDialog.Close(DialogResult.Ok(qrCodeData));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/QRScanDialog.razor.js");
                var dotNetReference = DotNetObjectReference.Create(this);
                await _module.InvokeVoidAsync("scanQRCode", "videoElement", dotNetReference);
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
        }
    }

    [JSInvokable]
    public async Task NotifyQRCodeRead(string data)
    {
        qrCodeData = data.Trim();

        //distach _item with entity framework tracking
        if (qrCodeData == "")
        {
            errorMessage = $"{qrCodeData} 未找到!";
            _hasScanned = true;
            _scanAreaStyle = "visibility: hidden;height: 0px;";
            StateHasChanged();
        }
        else
        {
            DialogConfirm();
            MudDialog.Close(DialogResult.Ok(qrCodeData));
        }

        

    }

    [JSInvokable]
    public async Task NotifyCameraError(string message)
    {
        errorMessage = message;
        StateHasChanged(); // Update the UI
    }
    [JSInvokable]
    public async Task NotifyCameraIdle()
    {
        errorMessage = "10秒内未找到二维码, 关闭摄像头.";
        _hasScanned = true;
        _scanAreaStyle = "visibility: hidden;height: 0px;";
        StateHasChanged();
    }

    //dispose
    public async ValueTask DisposeAsync()
    {
        StopCamera();
    }

    private async Task StopCamera()
    {
        if (_module is not null)
        {
            _module.InvokeVoidAsync("stopCamera");
        }
    }


}

@*
EXAMPLE
private async Task Example()
{
    var parameters = new DialogParameters<Shared.Dialog.ConfirmDialog> { { x => x.Content, "我确认点检被正确执行!" } };
    var dialog = await dialogService.ShowAsync<Shared.Dialog.ConfirmDialog>("", parameters, new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small });
    var result = await dialog.Result;
    if (result.Cancelled)
    {
        snackbar.Add($"点检操作取消.", Severity.Warning);
        return;
    }

}
*@
