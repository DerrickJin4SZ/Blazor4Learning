@using System.Text.Json.Serialization
@inject IJSRuntime jsRuntime
@implements IAsyncDisposable

<div @ref="element">
    <video id="video_@Id"
           class="video-js"
           muted
           webkit-playsinline
           playsinline
           x-webkit-airplay="allow"
           x5-video-player-type="h5"
           x5-video-player-fullscreen="true"
           x5-video-orientation="portraint">
    >
    <p class="vjs-no-js">
        To view this video please enable JavaScript, and consider upgrading to a
        web browser that
        <a href="https://videojs.com/html5-video-support/" target="_blank">
            supports HTML5 video
        </a>
    </p>
    </video>
    @if (Debug)
    {
        <pre>@info</pre>
    }
</div>


@code{
        [Inject] IJSRuntime? JS { get; set; }
        private IJSObjectReference? module;
        private DotNetObjectReference<VideoPlayer>? instance { get; set; }
        protected ElementReference element { get; set; }
        private bool init;
        private string? info;

        private string Id { get; set; } = Guid.NewGuid().ToString();

        /// <summary>
        /// 资源类型
        /// </summary>
        [Parameter]
        public string? SourcesType { get; set; }

        /// <summary>
        /// 资源地址
        /// </summary>
        [Parameter]
        public string? SourcesUrl { get; set; }

        [Parameter]
        public int Width { get; set; } = 300;

        [Parameter]
        public int Height { get; set; } = 200;

        [Parameter]
        public bool Controls { get; set; } = true;

        [Parameter]
        public bool Autoplay { get; set; } = true;

        [Parameter]
        public string Preload { get; set; } = "auto";

        /// <summary>
        /// 设置封面
        /// </summary>
        [Parameter]
        public string? Poster { get; set; }

        [Parameter]
        public VideoPlayerOption? Option { get; set; }

        [Parameter]
        public bool Debug { get; set; }


        /// <summary>
        /// 获得/设置 错误回调方法
        /// </summary>
        [Parameter]
        public Func<string, Task>? OnError { get; set; }

        /// <summary>
        /// JS回调方法
        /// </summary>
        /// <param name="init"></param>
        /// <returns></returns>
        [JSInvokable]
        public void GetInit(bool init) => this.init = init;

        /// <summary>
        /// JS回调方法
        /// </summary>
        /// <param name="error"></param>
        /// <returns></returns>
        [JSInvokable]
        public async Task GetError(string error)
        {
            info = error;
            if (Debug) StateHasChanged();
            if (OnError != null) await OnError.Invoke(error);
        }


        async ValueTask IAsyncDisposable.DisposeAsync()
        {
            if (module is not null)
            {
                module.InvokeVoidAsync("destroy", Id);
                module.DisposeAsync();
            }
        }


        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            try
            {
                if (firstRender)
                {
                    module = await JS!.InvokeAsync<IJSObjectReference>("import", "/js/VideoPlayer.js");
                    instance = DotNetObjectReference.Create(this);

                    Option = Option ?? new VideoPlayerOption()
                        {
                            Width = Width,
                            Height = Height,
                            Controls = Controls,
                            Autoplay = Autoplay,
                            Preload = Preload,
                            Poster = Poster,
                            //EnableSourceset= true,
                            //TechOrder= "['fakeYoutube', 'html5']"
                        };
                    Option.Sources.Add(new VideoSources(SourcesType, SourcesUrl));

                    try
                    {
                        await module.InvokeVoidAsync("loadPlayer", instance, "video_" + Id, Option);
                    }
                    catch (Exception e)
                    {
                        info = e.Message;
                        if (Debug) StateHasChanged();
                        Console.WriteLine(info);
                        if (OnError != null) await OnError.Invoke(info);
                    }
                }
            }
            catch (Exception e)
            {
                if (OnError != null) await OnError.Invoke(e.Message);
            }
        }
}

@code{
    
    public class VideoPlayerOption
    {
        [JsonPropertyName("width")]
        public int Width { get; set; } = 300;

        [JsonPropertyName("height")]
        public int Height { get; set; } = 200;

        [JsonPropertyName("controls")]
        public bool Controls { get; set; } = true;

        [JsonPropertyName("autoplay")]
        public bool Autoplay { get; set; } = true;

        [JsonPropertyName("preload")]
        public string Preload { get; set; } = "auto";

        /// <summary>
        /// 播放资源
        /// </summary>
        [JsonPropertyName("sources")]
        public List<VideoSources> Sources { get; set; } = new List<VideoSources>();

        /// <summary>
        /// 设置封面
        /// </summary>
        [JsonPropertyName("poster")]
        public string? Poster { get; set; }

        //[JsonPropertyName("enableSourceset")]
        //public bool EnableSourceset { get; set; }

        //[JsonPropertyName("techOrder")]
        //public string? TechOrder { get; set; } = "['html5', 'flash']";
    }


    /// <summary>
    /// 播放资源
    /// </summary>
    public class VideoSources
    {
        public VideoSources() { }

        public VideoSources(string? type, string? src)
        {
            this.Type = type ?? throw new ArgumentNullException(nameof(type));
            this.Src = src ?? throw new ArgumentNullException(nameof(src));
        }

        /// <summary>
        /// 资源类型<para></para>video/mp4<para></para>application/x-mpegURL<para></para>video/youtube
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; } = "application/x-mpegURL";

        /// <summary>
        /// 资源地址
        /// </summary>
        [JsonPropertyName("src")]
        public string Src { get; set; } = "application/x-mpegURL";
    }
}




