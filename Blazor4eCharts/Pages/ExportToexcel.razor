@page "/exportToexcel"
@using Blazor4eCharts.Data
@using ClosedXML.Excel
@using ClosedXML.Excel.Drawings
@using Microsoft.AspNetCore.Mvc
@using System.Drawing
@using System.IO
@using System.Drawing.Imaging
@inject WeatherForecastService ForecastService
@inject IJSRuntime JSRuntime




<h3>exportToexcel</h3>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button @onclick="exportToexcelByXML">export to excel</button>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private WeatherForecast[]? forecasts;
    private IJSObjectReference _exportJs;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }


    public async Task exportToexcelByXML()
    {
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Forecasts");
            var currentRow = 1;

            #region Header
            worksheet.Cell(currentRow, 1).Value = @"Date
TestForjasdhfajlksflajsfhla";
            worksheet.Cell(currentRow, 2).Value = "Temp. (C)";
            worksheet.Cell(currentRow, 3).Value = "Temp. (F)";
            worksheet.Cell(currentRow, 4).Value = "Summary";
            #endregion

            #region Body
            foreach (var weather in forecasts)
            {
                currentRow++;
                worksheet.Cell(currentRow, 1).Value = weather.Date;

                worksheet.Cell(currentRow, 2).Value = weather.TemperatureC;
                worksheet.Cell(currentRow, 3).Value = weather.TemperatureF;
                worksheet.Cell(currentRow, 4).Value = weather.Summary;
            }
            #endregion

            #region adjust row height
            worksheet.Columns().AdjustToContents();
            worksheet.Row(1).AdjustToContents();
            #endregion

            #region AddPicture
            currentRow++;
            var imagePath = "./wwwroot/pic/2024020120551097.PNG";
            using (var fileStream = new FileStream(imagePath, FileMode.Open, FileAccess.Read))
            {
                using (var memoryStream = new MemoryStream())
                {
                    fileStream.CopyTo(memoryStream);
                    memoryStream.Seek(0, SeekOrigin.Begin);

                    // Create an Image object from the MemoryStream
                    var image = Image.FromStream(memoryStream);

                    // Save the Image to a MemoryStream
                    var imageStream = new MemoryStream();
                    image.Save(imageStream, ImageFormat.Jpeg);
                    imageStream.Seek(0, SeekOrigin.Begin);

                    // Add the image to the worksheet using Excel-DNA
                    worksheet.AddPicture(imageStream)
                                .MoveTo(worksheet.Cell(currentRow, 1)).WithSize(400, 300);
                }
            }
            @*
            var image = worksheet.AddPicture(imagePath)
                                .MoveTo(worksheet.Cell(currentRow, 1)).WithSize(400, 300);
            var image1 = worksheet.AddPicture(imagePath)
                        .WithPlacement(XLPicturePlacement.FreeFloating).WithSize(400, 300);
            // Get the top and left offset of the first picture

            // Move the second picture to the right of the first picture
            image1.Placement = XLPicturePlacement.FreeFloating;
            image1.Left += image.Width ;
            image1.Top = image.Top;
            *@
            #endregion

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();

                var contentName = "WeatherForcast.xlsx";
                var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                _exportJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/ExportToexcel.razor.js");
                await _exportJs.InvokeVoidAsync("BlazorDownloadFile", contentName, contentType, content);
            }
        }
    }




}